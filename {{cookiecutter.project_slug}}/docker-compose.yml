version: '3.4'

# ADMIN MASTER PASSWORD: !!!SET MASTER_ADMIN_PASSWORD!!!

networks:
  default:
    external: false
  traefik-public:
    external: true

volumes:
  postgres_data:
  {%- if cookiecutter.use_letsencrypt == 'y' and cookiecutter.use_traefik == 'y' %}
  traefik_letsencrypt:
  {%- endif %}
  {%- if cookiecutter.use_portainer == 'y' %}
  portainer_data:
  {%- endif %}
  {%- if cookiecutter.use_rocketchat == 'y' %}
  rocketchat_db:
  {%- endif %}
  {%- if cookiecutter.use_wppconnect == 'y' %}
  wppconnect_data:
  wppconnect_userdata_dir:
  {%- endif %}
  {%- if cookiecutter.use_rocketchat_metrics == 'y' %}
  prometeus_data:
  grafana_data:
  {%- endif %}
  {%- if cookiecutter.use_botpress == 'y' %}
  botpress_data:
  {%- endif %}



services:

  {%- if cookiecutter.use_traefik == 'y' %}

  traefik:
    image: "traefik:v2.9"
    restart: unless-stopped
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--providers.docker.network=traefik-public"
      {%- if cookiecutter.use_letsencrypt  == 'y' %}
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.le.acme.httpchallenge=true"
      - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.le.acme.email={{ cookiecutter.email_for_letsencrypt }}"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      {%- endif %}
    ports:
      - "80:80"
      {%- if cookiecutter.use_letsencrypt == "y"%}
      - "443:443"
      {%- endif %}
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      {%- if cookiecutter.use_letsencrypt  == 'y' %}
      - traefik_letsencrypt:/letsencrypt
      {%- endif %}
    labels:
      - traefik.enable=true
      - traefik.docker.lbswarm=true
      - traefik.http.routers.traefik.rule=Host(`traefik.{{ cookiecutter.domain }}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      - traefik.http.routers.traefik.middlewares=auth
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.middlewares.auth.basicauth.users=admin:!!!SET MASTER_ADMIN_PASSWORD_HASH!!!
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.tls.certresolver=le
      {%- else %}
      - traefik.http.routers.traefik.entrypoints=web
      {%- endif %}      
    networks:
      - traefik-public
  

  {%- endif %}

  {%- if cookiecutter.use_portainer == 'y' %}

  portainer:
    image: portainer/portainer-ce
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
      - 9000:9000
      - 8000:8000
    {%- endif %}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-portainer.rule=Host(`portainer.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-portainer.loadbalancer.server.port=9000"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-portainer.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-portainer.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-portainer.entrypoints=web"
      {%- endif %}
    {%- endif %}
    {%- if cookiecutter.use_traefik == 'y' %}
    networks:
      - traefik-public
    {%- endif %}

  
  {%- endif %}


  {%- if cookiecutter.use_rocketconnect == 'y' %}

  rocketconnect: &django
    image: dudanogueira/rocket.connect:master
    restart: unless-stopped
    depends_on:
      - postgres
      - redis_rocketconnect
    environment:
      DJANGO_DEBUG: "False"
      DJANGO_SETTINGS_MODULE: config.settings.production
      DJANGO_SECRET_KEY: !!!SET DJANGO_SECRET_KEY!!!
      DJANGO_ADMIN_URL: admin!!!SET DJANGO_ADMIN_URL!!!/
      DJANGO_ALLOWED_HOSTS: "rc.{{cookiecutter.domain}},localhost,tasks.rocketconnect,rocketconnect"
      DJANGO_SECURE_SSL_REDIRECT: "False"
      DJANGO_SERVER_EMAIL: 
      DJANGO_ACCOUNT_ALLOW_REGISTRATION: "True"
      WEB_CONCURRENCY: 4
      REDIS_URL: redis://redis_rocketconnect:6379/0
      CELERY_FLOWER_USER: admin
      CELERY_FLOWER_PASSWORD: !!!SET MASTER_ADMIN_PASSWORD!!!
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: rocket_connect
      POSTGRES_USER: !!!SET POSTGRES_USER!!!
      POSTGRES_PASSWORD: !!!SET POSTGRES_PASSWORD!!!
      DJANGO_DEFAULT_FROM_EMAIL: email@company.com
      DJANGO_EMAIL_PORT: 587
      DJANGO_EMAIL_USE_TLS: "True"
      DJANGO_EMAIL_HOST: 'smtp_server'
      DJANGO_EMAIL_HOST_USER: 'smtp_user'
      DJANGO_EMAIL_HOST_PASSWORD: 'smtp_password'
      DJANGO_ACCOUNT_EMAIL_VERIFICATION: 'optional' # mandatory, optional, or none
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketconnect.rule=Host(`rc.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-rocketconnect.loadbalancer.server.port=5000"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketconnect.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketconnect.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketconnect.entrypoints=web"
      {%- endif %}
    {%- endif %}
    command: /start
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
     - "5000:5000"
    {%- endif %}
    {%- if cookiecutter.use_traefik == 'y' %}
    networks:
      - traefik-public
      - default
    {%- endif %}
  

  redis_rocketconnect:
    image: redis:5.0

  celeryworker:
    <<: *django
    command: /start-celeryworker
    ports: []
    labels: []
    healthcheck:
      disable: true

  celerybeat:
    <<: *django
    command: /start-celerybeat
    ports: []
    labels: []
    healthcheck:
      disable: true

  flower:
    <<: *django  
    command: celery flower --app=config.celery_app  --broker="${CELERY_BROKER_URL:-redis://redis:6379}" --basic_auth="admin:!!!SET MASTER_ADMIN_PASSWORD!!!" --url_prefix=flower!!!SET DJANGO_ADMIN_URL!!!
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
      - "5555:5555"
    {%- endif %}
    healthcheck:
      disable: true
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-flower.rule=Host(`rc.{{ cookiecutter.domain }}`) && PathPrefix(`/flower!!!SET DJANGO_ADMIN_URL!!!`)"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-flower.entrypoints=web"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-flower.loadbalancer.server.port=5555"
      # Add trailing slash to /flower!!!SET DJANGO_ADMIN_URL!!! path
      # https://community.traefik.io/t/middleware-to-add-the-if-needed/1895/4
      - traefik.http.middlewares.{{ cookiecutter.project_slug }}-flower-strip-slash.redirectregex.regex=(^.*\/flower!!!SET DJANGO_ADMIN_URL!!!$$)
      - traefik.http.middlewares.{{ cookiecutter.project_slug }}-flower-strip-slash.redirectregex.replacement=$$1/
      - traefik.http.middlewares.{{ cookiecutter.project_slug }}-flower-strip-slash.redirectregex.permanent=false
      - traefik.http.routers.{{ cookiecutter.project_slug }}-flower.middlewares={{ cookiecutter.project_slug }}-flower-strip-slash    
    {%- endif %}
    {%- if cookiecutter.use_traefik == 'y' %}
    networks:
      - traefik-public
      - default
    {%- endif %}

  {%- endif %}

  {%- if cookiecutter.use_rocketconnect == 'y' or cookiecutter.use_botpress == 'y' %}

  postgres:
    image: postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
      - ./scripts/postgres/:/docker-entrypoint-initdb.d/
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_MULTIPLE_DATABASES: rocket_connect,botpress
      POSTGRES_USER: !!!SET POSTGRES_USER!!!
      POSTGRES_PASSWORD: !!!SET POSTGRES_PASSWORD!!!

  {%- endif %}


  {%- if cookiecutter.use_wppconnect == 'y' %}

  wppconnect:
    image: wppconnect/server-cli:latest
    restart: unless-stopped
    command: wppserver
      --log-level DEBUG
      --secretKey My53cr3tKY
      --port 21465
      --startAllSession
      --webhook-allUnreadOnStart
      --no-webhook-onPresenceChanged
      --no-webhook-onParticipantsChanged
      #--no-webhook-listenAcks
    volumes:
      - wppconnect_data:/usr/src/server-cli/tokens
      - wppconnect_userdata_dir:/usr/src/server-cli/userDataDir
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
      - "21465:21465"
    {% endif %}

  {%- endif %}

  {%- if cookiecutter.use_rocketchat == 'y' %}

  rocketchat:
    # reference: https://github.com/RocketChat/Docker.Official.Image/blob/master/compose.yml
    # more on: https://docs.rocket.chat/quick-start/deploying-rocket.chat/rapid-deployment-methods/docker-and-docker compose
    image: registry.rocket.chat/rocketchat/rocket.chat:${RELEASE:-4.8.7}
    restart: unless-stopped
    environment:
      MONGO_URL: "${MONGO_URL:-\
        mongodb://${MONGODB_ADVERTISED_HOSTNAME:-mongodb}:${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}/\
        ${MONGODB_DATABASE:-rocketchat}?replicaSet=${MONGODB_REPLICA_SET_NAME:-rs0}}"
      MONGO_OPLOG_URL: "${MONGO_OPLOG_URL:\
        -mongodb://${MONGODB_ADVERTISED_HOSTNAME:-mongodb}:${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}/\
        local?replicaSet=${MONGODB_REPLICA_SET_NAME:-rs0}}"
      ROOT_URL: ${ROOT_URL:-http://localhost:${HOST_PORT:-3000}}
      PORT: ${PORT:-3000}
      DEPLOY_METHOD: docker
      DEPLOY_PLATFORM: ${DEPLOY_PLATFORM:-rocketconnect_cookiecutter}
      {%- if cookiecutter.use_rocketchat_metrics == 'y' %}
      OVERWRITE_SETTING_Prometheus_Enabled: "true"{%- endif %}
    depends_on:
      - mongodb
    expose:
      - ${PORT:-3000}
    {%- if cookiecutter.expose_ports == 'y' %}      
    ports:
      - "${BIND_IP:-0.0.0.0}:${HOST_PORT:-3000}:${PORT:-3000}"
    {%- endif %}
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketchat.rule=Host(`chat.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-rocketchat.loadbalancer.server.port=3000"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketchat.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketchat.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketchat.entrypoints=web"
      {%- endif %}
    {%- endif %}
    {%- if cookiecutter.use_traefik == 'y' %}
    networks:
      - traefik-public
      - default
    {%- endif %}

  mongodb:
    image: docker.io/bitnami/mongodb:${MONGODB_VERSION:-4.4}
    restart: unless-stopped
    volumes:
      - rocketchat_db:/bitnami/mongodb
    environment:
      MONGODB_REPLICA_SET_MODE: primary
      MONGODB_REPLICA_SET_NAME: ${MONGODB_REPLICA_SET_NAME:-rs0}
      MONGODB_PORT_NUMBER: ${MONGODB_PORT_NUMBER:-27017}
      MONGODB_INITIAL_PRIMARY_HOST: ${MONGODB_INITIAL_PRIMARY_HOST:-mongodb}
      MONGODB_INITIAL_PRIMARY_PORT_NUMBER: ${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}
      MONGODB_ADVERTISED_HOSTNAME: ${MONGODB_ADVERTISED_HOSTNAME:-mongodb}
      MONGODB_ENABLE_JOURNAL: ${MONGODB_ENABLE_JOURNAL:-true}
      ALLOW_EMPTY_PASSWORD: ${ALLOW_EMPTY_PASSWORD:-yes}

  {%- endif %}


  {%- if cookiecutter.use_rocketchat_metrics == 'y' %}

  
  grafana:
    image: grafana/grafana:9.3.2
    restart: unless-stopped
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
      - "3002:3000"
    {%- endif %}
    volumes:
      - ./confs/rocketchat_metrics/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./confs/rocketchat_metrics/grafana/provisioning/dashboards/provider:/etc/grafana/provisioning/dashboards:ro
      - ./confs/rocketchat_metrics/grafana/provisioning/dashboards/json-exports:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=!!!SET MASTER_ADMIN_PASSWORD!!!
      - GF_SECURITY_ADMIN_USER=admin

    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketchat_metrics.rule=Host(`grafana.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-rocketchat_metrics.loadbalancer.server.port=3000"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketchat_metrics.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketchat_metrics.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketchat_metrics.entrypoints=web"
      {%- endif %}
    {%- endif %}
    {%- if cookiecutter.use_traefik == 'y' %}
    networks:
      - traefik-public
      - default
    {%- endif %}
  
  prometheus:
    image: quay.io/prometheus/prometheus:v2.40.7
    restart: unless-stopped
    ports:
     - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - '--storage.tsdb.retention.time=12w'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - prometeus_data:/prometheus
      - ./confs/rocketchat_metrics/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro

  {%- endif %}


  {%- if cookiecutter.use_botpress == 'y' %}  
  redis:
    image: "bitnami/redis:6.2.4"
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    expose:
      - "6379"

  botpress:
    image: botpress/server
    restart: unless-stopped
    command: /botpress/bp
    {%- if cookiecutter.expose_ports == 'y' %}
    expose:
      - 3000
    ports:
      - "3001:3000"      
    {%- endif %}
    environment:
      - DATABASE_URL=postgres://!!!SET POSTGRES_USER!!!:!!!SET POSTGRES_PASSWORD!!!@postgres:5432/botpress
      - REDIS_URL=redis://redis:6379?password=${REDIS_PASSWORD}
      - BP_PRODUCTION=true
      - BPFS_STORAGE=database
    depends_on:
      - postgres
      - redis
    volumes:
      - botpress_data:/botpress/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-botpress.rule=Host(`botpress.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-botpress.loadbalancer.server.port=3000"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-botpress.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-botpress.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-botpress.entrypoints=web"
      {%- endif %}
    networks:
      - traefik-public
      - default
  {%- endif %}
